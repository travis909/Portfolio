{"version":3,"sources":["Components/Navigation.js","Components/home.js","Components/about.js","Components/education.js","Components/skills.js","Components/projects.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","classes","navStyle","color","flex","flexDirection","margin","react_default","a","createElement","className","AppBar","position","Toolbar","Typography","variant","react_router_dom","style","to","Home","About","Education","Skills","Projects","App","react_router","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sRAUMA,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,MAMC,SAASK,IACtB,IAAMC,EAAUV,IAEVW,EAAW,CACfC,MAAO,QACPC,KAAM,EACNC,cAAe,MACfC,OAAQ,QAGV,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWT,EAAQP,MACtBa,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQC,SAAS,UACfL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAWT,EAAQF,OAA5C,gBAGAQ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMC,MAAOf,EAAUgB,GAAG,KAA1B,QACAX,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMC,MAAOf,EAAUgB,GAAG,UAA1B,SACAX,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMC,MAAOf,EAAUgB,GAAG,aAA1B,YACAX,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMC,MAAOf,EAAUgB,GAAG,cAA1B,aACAX,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMC,MAAOf,EAAUgB,GAAG,WAA1B,2BCzCCC,MAJf,WACI,OAAOZ,EAAAC,EAAAC,cAAA,oBCGIW,MAJf,WACI,OAAOb,EAAAC,EAAAC,cAAA,qBCGIY,MAJf,WACI,OAAOd,EAAAC,EAAAC,cAAA,yBCGIa,MAJf,WACI,OAAOf,EAAAC,EAAAC,cAAA,iCCGIc,MAJf,WACI,OAAOhB,EAAAC,EAAAC,cAAA,wBCMUe,mLAEjB,OACEjB,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACT,EAAD,MACAO,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACElB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWT,IACjCZ,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWR,IAChCb,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOE,KAAK,YAAYC,UAAWL,IACnChB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOE,KAAK,UAAUC,UAAWN,IACjCf,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOE,KAAK,aAAaC,UAAWP,cAXfQ,aCGbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0891abc2.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n//import TemporaryDrawer from './Drawer.js';\nimport { Link } from \"react-router-dom\";\nimport Container from '@material-ui/core/Container';\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\n\n\nexport default function ButtonAppBar() {\n  const classes = useStyles();\n\n  const navStyle = {\n    color: 'white',\n    flex: 1,\n    flexDirection: 'row',\n    margin: '20px'\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Travis Evans\n          </Typography>\n          <div>\n            <nav>\n              <Link style={navStyle} to=\"/\">Home</Link>\n              <Link style={navStyle} to=\"/about\">About</Link> \n              <Link style={navStyle} to=\"/projects\">Projects</Link> \n              <Link style={navStyle} to=\"/education\">Education</Link>\n              <Link style={navStyle} to=\"/skills\">Skills</Link>\n            </nav>\n          </div>\n        </Toolbar>\n      </AppBar>\n    </div>\n\n  );\n}\n","import React from 'react'\n\nfunction Home() {\n    return <div>Home</div>;\n}\n\nexport default Home;","import React from 'react'\n\nfunction About() {\n    return <div>About</div>;\n}\n\nexport default About;","import React from 'react'\n\nfunction Education() {\n    return <div>Education</div>;\n}\n\nexport default Education;","import React from 'react'\n\nfunction Skills() {\n    return <div>Skills/Experience</div>;\n}\n\nexport default Skills;","import React from 'react'\n\nfunction Projects() {\n    return <div>Projects</div>;\n}\n\nexport default Projects;","import React, { Component } from 'react'\nimport Navigation from './Components/Navigation.js';\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport Home from './Components/home.js';\nimport About from './Components/about.js';\nimport Education from './Components/education.js';\nimport Skills from './Components/skills.js';\nimport Projects from './Components/projects.js';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Navigation />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/about\" component={About} />\n            <Route path=\"/projects\" component={Projects} />\n            <Route path=\"/skills\" component={Skills} />\n            <Route path=\"/education\" component={Education} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}